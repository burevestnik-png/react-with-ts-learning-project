{"version":3,"sources":["components/Navbar.tsx","pages/AboutPage.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","react_default","a","createElement","className","style","padding","react_router_dom","to","AboutPage","history","useHistory","Fragment","onClick","push","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","onAdd","current","value","htmlFor","TodoList","_ref","todos","onRemove","onToggle","length","map","todo","classes","completed","join","checked","onChange","bind","title","preventDefault","removeHandler","TodosPage","_useState","useState","_useState2","Object","slicedToArray","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","components_TodoForm","newTodo","Date","now","prevState","concat","toConsumableArray","components_TodoList","objectSpread","window","confirm","filter","App","components_Navbar","react_router","component","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7b637ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nconst Navbar: React.FunctionComponent = () =>\r\n    <nav>\r\n        <div className=\"nav-wrapper purple darken-3\" style={{padding: '0 1rem'}}>\r\n            <span className=\"brand-logo\">React + TypeScript</span>\r\n            <ul className=\"right hide-on-med-and-down\">\r\n                <li><NavLink to=\"/\">TODO list</NavLink></li>\r\n                <li><NavLink to=\"/about\">Information</NavLink></li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n\r\nexport default Navbar;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst AboutPage: FunctionComponent = () => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            <h1>About page</h1>\r\n            <p>\r\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. A doloremque est id maiores minus nostrum\r\n                quaerat quam similique ut! Vero.\r\n            </p>\r\n            <button className=\"btn\" onClick={() => history.push('/')}>\r\n                Go back to TODO list\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AboutPage;\r\n","import React, { KeyboardEvent, useRef } from 'react';\r\n\r\ninterface TodoFormProps {\r\n    onAdd( title: string ): void\r\n}\r\n\r\nconst TodoForm: React.FC<TodoFormProps> = props => {\r\n    // TODO: First variant how to work with input\r\n    // const [title, setTitle] = useState<string>(\"\");\r\n    //\r\n    // const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(event.target.value);\r\n    // }\r\n    const ref = useRef<HTMLInputElement>(null);\r\n\r\n    const keyPressHandler = ( event: KeyboardEvent ) => {\r\n        if (event.key === 'Enter') {\r\n            // @ts-ignore\r\n            props.onAdd(ref.current.value);\r\n            // @ts-ignore\r\n            ref.current.value = ''\r\n            // setTitle('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"input-field mt2\">\r\n            <input\r\n                // value={title}\r\n                type=\"text\"\r\n                id=\"title\"\r\n                ref={ ref }\r\n                placeholder=\"Enter todo action\"\r\n                // onChange={changeHandler}\r\n                onKeyPress={ keyPressHandler }\r\n            />\r\n            <label htmlFor=\"title\"\r\n                   className=\"active\"\r\n            >\r\n                Enter todo action\r\n            </label >\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { FunctionComponent, MouseEvent } from 'react';\r\nimport { ITodo } from \"../entities/ITodo\";\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[],\r\n    onToggle( id: number ): void,\r\n    onRemove( id: number ): void\r\n}\r\n\r\nconst TodoList: FunctionComponent<TodoListProps> = ( { todos, onRemove, onToggle } ) => {\r\n\r\n    if (todos.length === 0) {\r\n        return <p className=\"center\">No todos</p>\r\n    }\r\n\r\n    const removeHandler = ( event: MouseEvent, id: number ) => {\r\n        event.preventDefault();\r\n\r\n        onRemove(id);\r\n    };\r\n\r\n    return (\r\n        <ul>\r\n            { todos.map(todo => {\r\n                const classes = [ 'todo' ]\r\n                if (todo.completed) {\r\n                    classes.push('completed')\r\n                }\r\n                return (\r\n                    <li className={ classes.join(\" \") }\r\n                        key={ todo.id }\r\n                    >\r\n                        <label>\r\n                            <input type=\"checkbox\"\r\n                                   checked={ todo.completed }\r\n                                   onChange={ onToggle.bind(null, todo.id) }\r\n                            />\r\n                            <span>{ todo.title }</span>\r\n                            <i className=\"material-icons red-text\"\r\n                               onClick={ event => removeHandler(event, todo.id) }\r\n                            >delete</i>\r\n                        </label>\r\n                    </li>\r\n                );\r\n            }) }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport TodoForm from '../components/TodoForm';\r\nimport TodoList from \"../components/TodoList\";\r\nimport { ITodo } from \"../entities/ITodo\";\r\n\r\nconst TodosPage: React.FC = () => {\r\n    const [ todos, setTodos ] = useState<ITodo[]>([]);\r\n\r\n    useEffect(() => {\r\n        const saved = JSON.parse(localStorage.getItem('todos') || '[]') as Array<ITodo>\r\n        setTodos(saved)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos))\r\n    }, [ todos ])\r\n\r\n    const addHandler = ( title: string ) => {\r\n        const newTodo: ITodo = {\r\n            title,\r\n            id: Date.now(),\r\n            completed: false\r\n        }\r\n        setTodos(prevState => [ newTodo, ...prevState ])\r\n    }\r\n\r\n    const toggleHandler = ( id: number ) => {\r\n        setTodos(prevState => prevState.map(value => {\r\n            if (value.id === id) {\r\n                return {\r\n                    ...value,\r\n                    completed: !value.completed\r\n                }\r\n            }\r\n            return value;\r\n        }))\r\n    }\r\n\r\n    const removeHandler = ( id: number ) => {\r\n        const shouldRemove = window.confirm('Do you really want to delete it?')\r\n        if (shouldRemove) {\r\n            setTodos(prevState => prevState.filter(value => value.id !== id));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TodoForm onAdd={ addHandler }/>\r\n            <TodoList todos={ todos }\r\n                      onToggle={ toggleHandler }\r\n                      onRemove={ removeHandler }\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodosPage;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport AboutPage from \"./pages/AboutPage\";\r\nimport TodosPage from \"./pages/TodosPage\";\r\n\r\n\r\nconst App: React.FC = () =>\r\n    <BrowserRouter>\r\n        <Navbar/>\r\n        <div className=\"container\">\r\n            <Switch>\r\n                <Route component={ TodosPage }\r\n                       path=\"/\"\r\n                       exact\r\n                />\r\n                <Route component={ AboutPage }\r\n                       path=\"/about\"\r\n                />\r\n            </Switch>\r\n        </div>\r\n    </BrowserRouter>\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}